{"Mode":"Backup","Version":"4.2.400","SystemCode":"ERP","LibraryId":"BTRREST","Library":{"OriginalID":"BartenderDemo","Description":"Demo Bartender REST examples","GlobalID":"33908337-1967-413a-ab0c-ef7a75698300","EpicorVersion":"4.2.100","Revision":208,"Published":false,"Private":false,"Disabled":false,"Mode":0,"AllowCustomCodeWidgets":true,"AllowCustomCodeFunctions":true,"DirectDBAccess":1,"OwnedByCompany":"EPIC06","Owner":"epicor","SharedWithGroup":"EfxAdmin","Functions":[{"FunctionID":"BTRESTDirectManyLabel","Description":"Prints a Label Directly from via the Bartender REST API instead of Integration web service  ","Kind":2,"RequireTransaction":true,"SingleRowMode":false,"Private":false,"Disabled":false,"Invalid":false,"Thumbnail":null,"Body":"{\"Code\":\"// 2024-04 SHALL Prints Bartender label using the BARTENDER REST API\\r\\n// for remote deployments you need to set the \\\"RemoteAccess\\\": {\\\"Allowed\\\": true} in the C:\\\\Program Files\\\\Seagull\\\\BarTender 2022\\\\net6.0\\\\apsettings.json file\\r\\n// Note NTLM is deprecated in Server 2025 and Windows 11 24H2 at this stage seagull only use Token auth on Bartender cloud. May need to use httpclientlibrary rather\\r\\n// This prints many labels using the action group\\r\\n\\r\\ntry\\r\\n{\\r\\n   var printBTWAction = new Dictionary<string, object>();\\r\\n\\r\\n   var client = new RestClient();\\r\\n   client.Authenticator = new NtlmAuthenticator(); // Note NTLM is deprecated in Server 2025 and Windows 11 24H2 at this stage seagull only use Token auth on Bartender cloud. May need to use httpclientlibrary rather than restsharp.\\r\\n\\r\\n   string protocol = \\\"http://\\\";\\r\\n   string Env = this.GetEnvironmentType().ToString();\\r\\n\\r\\n   // Retrieve Parameters from UD codes\\r\\n   string btHostName = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"btHostName\\\").Select(x => x.CodeDesc).FirstOrDefault();\\r\\n   bool useSSL = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"UseSSL\\\" && x.IsActive).Any();\\r\\n   string integrationPath = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"Integratn\\\").Select(x => x.CodeDesc).FirstOrDefault();\\r\\n   string templatePath = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"Template\\\").Select(x => x.CodeDesc).FirstOrDefault();\\r\\n   string port = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"Port\\\").Select(x => x.CodeDesc).FirstOrDefault();\\r\\n\\r\\n   if (this.isAction)\\r\\n   {\\r\\n      integrationPath = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"ActionsURL\\\").Select(x => x.CodeDesc).FirstOrDefault();\\r\\n   }\\r\\n\\r\\n   // Get Printer Based on Custom Sysprinter data, or could use workstation if configured correctly\\r\\n   string printerName = Db.SysPrinter.Where(x => x.Company == Session.CompanyID && x.pbsSiteID_c == Session.PlantID).Select(x => x.NetworkPath).FirstOrDefault();\\r\\n\\r\\n   if (btHostName == null || integrationPath == null || templatePath == null || printerName == null)\\r\\n   {\\r\\n      output = $\\\"Bartender User Code Parameters or Printer not configured correctly, please refer to documentation\\\";\\r\\n      return;\\r\\n   }\\r\\n\\r\\n   if (useSSL)\\r\\n      protocol = \\\"https://\\\";\\r\\n\\r\\n   // Get the Label Data and add to output \\r\\n   var result = this.EfxLib.Helpers_Demo.ExecuteBAQ(this.BAQParams, this.BAQName);\\r\\n\\r\\n   if (result.dsResult.Tables.Contains(\\\"Results\\\"))\\r\\n   {\\r\\n      // Get the \\\"Results\\\" table\\r\\n      DataTable table = result.dsResult.Tables[\\\"Results\\\"];\\r\\n      var actions = new List<Dictionary<string, object>>();\\r\\n\\r\\n      foreach (DataRow row in table.Rows)\\r\\n      {\\r\\n         // Convert the row to a dictionary\\r\\n         var namedDataSourcesDict = table.Columns.Cast<DataColumn>()\\r\\n            .ToDictionary(column => column.ColumnName, column => row[column]);\\r\\n\\r\\n         // Create the BT REST API Action Payload object to be serialized NamedDataSourcesjson is the list of Named Data Sources on the label\\r\\n         printBTWAction = new Dictionary<string, object>\\r\\n         {\\r\\n            { \\\"Document\\\", $@\\\"{templatePath}{this.labelName}\\\" },\\r\\n            { \\\"Printer\\\", printerName },\\r\\n            { \\\"Name\\\", \\\"Print Document Request\\\" },\\r\\n            { \\\"Description\\\", \\\"This is a print document request to print a barcode label.\\\" },\\r\\n            { \\\"SaveAfterPrint\\\", false },\\r\\n            { \\\"QueueAndContinue\\\", false },\\r\\n            { \\\"VerifyPrintJobIsComplete\\\", true },\\r\\n            { \\\"ReturnPrintSummary\\\", true },\\r\\n            { \\\"NamedDataSources\\\", namedDataSourcesDict }\\r\\n         };\\r\\n\\r\\n         var action = new Dictionary<string, object>\\r\\n         {\\r\\n            [\\\"PrintBTWAction\\\"] = printBTWAction\\r\\n         };\\r\\n\\r\\n         actions.Add(action);\\r\\n      }\\r\\n\\r\\n      var actionGroup = new Dictionary<string, object>\\r\\n      {\\r\\n         [\\\"ActionGroup\\\"] = new Dictionary<string, object>\\r\\n         {\\r\\n            [\\\"Actions\\\"] = actions\\r\\n         }\\r\\n      };\\r\\n\\r\\n      // Serialize the object to JSON\\r\\n      string json = JsonConvert.SerializeObject(actionGroup, Formatting.Indented);\\r\\n\\r\\n      // Set the environment value to whatever environment we are printing from (Label configured to display Sample Watermark if set to NonProduction)\\r\\n      json = json.Replace(\\\"\\\\\\\"Calculated_Env\\\\\\\": \\\\\\\"\\\\\\\"\\\", \\\"\\\\\\\"Calculated_Env\\\\\\\":\\\\\\\"\\\" + Env + \\\"\\\\\\\"\\\");\\r\\n\\r\\n      // Build the request\\r\\n      var requestUrl = $\\\"{protocol}{btHostName}:{port}{integrationPath}\\\";\\r\\n      var request = new RestRequest(requestUrl);\\r\\n\\r\\n      // Submit the request\\r\\n      request.AddHeader(\\\"Accept\\\", \\\"application/json\\\");\\r\\n      request.Method = Method.POST;\\r\\n\\r\\n      request.AddParameter(\\\"application/json\\\", json, ParameterType.RequestBody);\\r\\n\\r\\n#if DEBUG\\r\\n      Ice.Diagnostics.Log.WriteEntry($\\\"json: {json}\\\");\\r\\n      output = $\\\"{btHostName}  :   {useSSL}  :  {integrationPath}  :  {templatePath}  : {labelName}  :  {requestUrl}  :  {printerName}  :  {json}\\\";\\r\\n#endif\\r\\n\\r\\n      var response = client.Execute(request);\\r\\n\\r\\n      responseCode = (int)response.StatusCode;\\r\\n      responseBody = response.Content;\\r\\n\\r\\n      if (response.StatusCode == HttpStatusCode.Created)\\r\\n      {\\r\\n         var anonymousType = new { Id = \\\"\\\", Status = \\\"\\\", StatusUrl = \\\"\\\" };\\r\\n         var responseObject = JsonConvert.DeserializeAnonymousType(responseBody, anonymousType);\\r\\n         btResponseStatus = responseObject.Status;\\r\\n      }\\r\\n      else\\r\\n      {\\r\\n         Ice.Diagnostics.Log.WriteEntry($\\\"  Unexpected response status code: {responseCode}\\\");\\r\\n      }\\r\\n   }\\r\\n}\\r\\ncatch (Exception ex)\\r\\n{\\r\\n   Ice.Diagnostics.Log.WriteEntry($\\\"Error occurred while generating the label. {ex}\\\");\\r\\n   output = $\\\"An error occurred while generating the label. Please contact support for assistance.  {output}\\\";\\r\\n}\",\"Usings\":\"using Newtonsoft.Json;\\r\\nusing System.IO;\\r\\nusing System.Net;\\r\\nusing System.Text;\\r\\nusing Newtonsoft.Json;\\r\\nusing Newtonsoft.Json.Linq;\\r\\nusing RestSharp;\\r\\nusing RestSharp.Authenticators;\\r\\n\"}","Notes":"[epicor: 01/04/2024]\nInitial\n\nUnsupported example. Use at your own risk. Feel free to enhance and modify.\n\nCan enhance this by using UD codes for Labels and the related BAQ for example use a UD coding Scheme of Two letters for the label name then a second UDCode for the related BAQ  pass in the two letters for the label to the functon and let the function lookup the label template and baqID to do the work.  This would allow a simple UI for end users to be able to update the label process without having to modify code.\n\nNote NTLM is deprecated in Server 2025 and Windows 11 24H2 at this stage seagull only use Token auth on Bartender cloud. May need to use httpclientlibrary rather\n\nFuture enhancements:\n - Could bring all Bartender user codes into a list then parse rather than multiple db requests\n\nRequest Body example\n   {\"labelName\": \"REST_DIRECT_Label.btw\",\n  \"BAQParams\": \"\",\n  \"BAQName\": \"testcustomer\",\n  \"isAction\": true\n   }","FunctionSignature":[{"Response":false,"ParameterID":1,"ArgumentName":"labelName","Order":1,"DataType":"System.String","Optional":false},{"Response":false,"ParameterID":2,"ArgumentName":"BAQParams","Order":2,"DataType":"System.String","Optional":false},{"Response":false,"ParameterID":3,"ArgumentName":"BAQName","Order":3,"DataType":"System.String","Optional":false},{"Response":false,"ParameterID":4,"ArgumentName":"isAction","Order":4,"DataType":"System.Boolean","Optional":false},{"Response":true,"ParameterID":1,"ArgumentName":"responseCode","Order":1,"DataType":"System.Int32","Optional":false},{"Response":true,"ParameterID":2,"ArgumentName":"responseBody","Order":2,"DataType":"System.String","Optional":false},{"Response":true,"ParameterID":3,"ArgumentName":"output","Order":3,"DataType":"System.String","Optional":false},{"Response":true,"ParameterID":4,"ArgumentName":"btResponseStatus","Order":4,"DataType":"System.String","Optional":false}]},{"FunctionID":"BTRESTDirect-OneLabel","Description":"Prints a Label Directly from via the Bartender REST API instead of Integration web service","Kind":2,"RequireTransaction":true,"SingleRowMode":false,"Private":false,"Disabled":false,"Invalid":false,"Thumbnail":null,"Body":"{\"Code\":\"// 2024-04 SHALL Prints Bartender label using the BARTENDER REST API\\r\\n// For remote deployments you need to set the    \\\"RemoteAccess\\\": {\\\"Allowed\\\":  true} in the C:\\\\Program Files\\\\Seagull\\\\BarTender 2022\\\\net6.0\\\\apsettings.json file\\r\\n//Note NTLM is depricated in Server 2025 and Windows 11 24H2 at this stage seagull only use Token auth on Bartender cloud.v\\r\\n//This only will print 1 label\\r\\n\\r\\ntry\\r\\n{\\r\\n    var client = new RestClient();\\r\\n    client.Authenticator = new NtlmAuthenticator(); //Note NTLM is depricated in Server 2025 and Windows 11 24H2 at this stage seagull only use Token auth on Bartender cloud.\\r\\n\\r\\n    string protocol = \\\"http://\\\";\\r\\n    string Env = this.GetEnvironmentType().ToString();\\r\\n\\r\\n    // Retrieve Parameters from UD codes\\r\\n    string btHostName = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"btHostName\\\").Select(x => x.CodeDesc).FirstOrDefault();\\r\\n    bool useSSL = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"UseSSL\\\" && x.IsActive).Any();\\r\\n    string integrationPath = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"Integratn\\\").Select(x => x.CodeDesc).FirstOrDefault();    \\r\\n    string templatePath = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"Template\\\").Select(x => x.CodeDesc).FirstOrDefault();\\r\\n    string port = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"Port\\\").Select(x => x.CodeDesc).FirstOrDefault();\\r\\n\\r\\n    if(this.isAction)\\r\\n    {\\r\\n      integrationPath = Db.UDCodes.Where(x => x.Company == Session.CompanyID && x.CodeTypeID == \\\"Bartender\\\" && x.CodeID == \\\"ActionsURL\\\").Select(x => x.CodeDesc).FirstOrDefault();\\r\\n    }\\r\\n    \\r\\n\\r\\n    // Get Printer Based on Custom Sysprinter data, or could use workstation if configured correctly\\r\\n    string printerName = Db.SysPrinter.Where(x => x.Company == Session.CompanyID && x.pbsSiteID_c == Session.PlantID).Select(x => x.NetworkPath).FirstOrDefault();\\r\\n\\r\\n    if (btHostName == null || integrationPath == null || templatePath == null || printerName == null)\\r\\n    {\\r\\n        output = $\\\"Bartender User Code Parameters or Printer not configured correctly, please refer to documentation\\\";\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (useSSL)\\r\\n        protocol = \\\"https://\\\";\\r\\n\\r\\n    // Get the Label Data and add to output \\r\\n    var result = this.EfxLib.Helpers_Demo.ExecuteBAQ(this.BAQParams, this.BAQName);\\r\\n\\r\\n    string NamedDataSourcesjson = string.Empty;\\r\\n\\r\\n    if (result.dsResult.Tables.Contains(\\\"Results\\\"))\\r\\n    {\\r\\n        // Get the \\\"Results\\\" table\\r\\n        System.Data.DataTable table = result.dsResult.Tables[\\\"Results\\\"];\\r\\n\\r\\n        // Check if the table has any rows\\r\\n        if (table.Rows.Count > 0)\\r\\n        {\\r\\n           var row = table.Rows[0];\\r\\n\\r\\n          // Convert the row to a dictionary\\r\\n          var dict = table.Columns.Cast<DataColumn>()\\r\\n                    .ToDictionary(column => column.ColumnName, column => row[column]);\\r\\n\\r\\n          // Serialize the dictionary to JSON\\r\\n          NamedDataSourcesjson = JsonConvert.SerializeObject(dict, Formatting.Indented);\\r\\n          }\\r\\n\\r\\n        // Create the BT REST API Action Payload object to be serialized NamedDataSourcesjson is the list of Named Data Sources on the label\\r\\n        var obj = new\\r\\n        {\\r\\n            PrintBTWAction = new\\r\\n            {\\r\\n                Document = $@\\\"{templatePath}{this.labelName}\\\",\\r\\n                Printer = printerName,\\r\\n                Name = \\\"Print Document Request\\\",\\r\\n                Description = \\\"This is a print document request to print a barcode label.\\\",\\r\\n                SaveAfterPrint = false,\\r\\n                QueueAndContinue = false,\\r\\n                VerifyPrintJobIsComplete = true,\\r\\n                ReturnPrintSummary = true,\\r\\n                NamedDataSources = JsonConvert.DeserializeObject<Dictionary<string, object>>(NamedDataSourcesjson)\\r\\n\\r\\n            }\\r\\n        };\\r\\n\\r\\n        // Serialize the object to JSON\\r\\n        string json = JsonConvert.SerializeObject(obj, Formatting.Indented);\\r\\n\\r\\n        // Set the environment value to whatever environment we are printing from (Label configured to display Sample Watermark if set to NonProduction)\\r\\n        json = json.Replace(\\\"\\\\\\\"Calculated_Env\\\\\\\": \\\\\\\"\\\\\\\"\\\", \\\"\\\\\\\"Calculated_Env\\\\\\\":\\\\\\\"\\\" + Env + \\\"\\\\\\\"\\\");\\r\\n\\r\\n        // Build the request\\r\\n        var requestUrl = $\\\"{protocol}{btHostName}:{port}{integrationPath}\\\";\\r\\n        var request = new RestRequest(requestUrl);\\r\\n\\r\\n        // Submit the request\\r\\n        request.AddHeader(\\\"Accept\\\", \\\"application/json\\\");\\r\\n        request.Method = Method.POST;\\r\\n\\r\\n        request.AddParameter(\\\"application/json\\\", json, ParameterType.RequestBody);\\r\\n\\r\\n#if DEBUG\\r\\n        Ice.Diagnostics.Log.WriteEntry($\\\"json: {json}\\\");\\r\\n        output = $\\\"{btHostName}  :   {useSSL}  :  {integrationPath}  :  {templatePath}  : {labelName}  :  {requestUrl}  :  {printerName}  :  {json}\\\";\\r\\n#endif\\r\\n\\r\\n        var response = client.Execute(request);\\r\\n\\r\\n        responseCode = (int)response.StatusCode;\\r\\n        responseBody = response.Content;\\r\\n\\r\\n        if (response.StatusCode == HttpStatusCode.Created)\\r\\n        {\\r\\n            // Returned JSON from BT is not a jArray so it will not Parse\\r\\n            // JArray JSONResponse = JArray.Parse(response.Content);\\r\\n            \\r\\n            //Need to use this method\\r\\n            var anonymousType = new { Id = \\\"\\\", Status = \\\"\\\", StatusUrl = \\\"\\\" };\\r\\n            var responseObject = JsonConvert.DeserializeAnonymousType(responseBody, anonymousType);\\r\\n            btResponseStatus = responseObject.Status;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            Ice.Diagnostics.Log.WriteEntry($\\\"  Unexpected response status code: {responseCode}\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\ncatch (Exception ex)\\r\\n{\\r\\n    Ice.Diagnostics.Log.WriteEntry($\\\"Error occurred while generating the label. {ex}\\\");\\r\\n    output = $\\\"An error occurred while generating the label. Please contact support for assistance.  {output}\\\";\\r\\n}\\r\\n\",\"Usings\":\"using Newtonsoft.Json;\\r\\nusing System.IO;\\r\\nusing System.Net;\\r\\nusing System.Text;\\r\\nusing Newtonsoft.Json;\\r\\nusing Newtonsoft.Json.Linq;\\r\\nusing RestSharp;\\r\\nusing RestSharp.Authenticators;\\r\\n\"}","Notes":"epicor: 01/04/2024]\nInitial\n\nUnsupported example. Use at your own risk. Feel free to enhance and modify.\n\nCan enhance this by using UD codes for Labels and the related BAQ for example use a UD coding Scheme of Two letters for the label name then a second UDCode for the related BAQ  pass in the two letters for the label to the functon and let the function lookup the label template and baqID to do the work.  This would allow a simple UI for end users to be able to update the label process without having to modify code.\n\nNote NTLM is deprecated in Server 2025 and Windows 11 24H2 at this stage seagull only use Token auth on Bartender cloud. May need to use httpclientlibrary rather\n\nFuture enhancements:\n - Could bring all Bartender user codes into a list then parse rather than multiple db requests\n\nRequest Body example\n   {\"labelName\": \"REST_DIRECT_Label.btw\",\n  \"BAQParams\": \"JobNum:2046\",\n  \"BAQName\": \"Job_Label_Data\",\n  \"isAction\": true\n   }","FunctionSignature":[{"Response":false,"ParameterID":1,"ArgumentName":"labelName","Order":1,"DataType":"System.String","Optional":false},{"Response":false,"ParameterID":2,"ArgumentName":"BAQParams","Order":2,"DataType":"System.String","Optional":false},{"Response":false,"ParameterID":3,"ArgumentName":"BAQName","Order":3,"DataType":"System.String","Optional":false},{"Response":false,"ParameterID":4,"ArgumentName":"isAction","Order":4,"DataType":"System.Boolean","Optional":false},{"Response":true,"ParameterID":1,"ArgumentName":"responseCode","Order":1,"DataType":"System.Int32","Optional":false},{"Response":true,"ParameterID":2,"ArgumentName":"responseBody","Order":2,"DataType":"System.String","Optional":false},{"Response":true,"ParameterID":3,"ArgumentName":"output","Order":3,"DataType":"System.String","Optional":false},{"Response":true,"ParameterID":4,"ArgumentName":"btResponseStatus","Order":4,"DataType":"System.String","Optional":false}]}],"LibraryReferences":[{"ReferenceType":0,"ReferenceID":"Newtonsoft.Json.dll"},{"ReferenceType":0,"ReferenceID":"RestSharp.dll"},{"ReferenceType":1,"ReferenceID":"ICE.SysPrinter","Updatable":false},{"ReferenceType":1,"ReferenceID":"ICE.UDCodes","Updatable":false},{"ReferenceType":2,"ReferenceID":"ICE:BO:DynamicQuery"},{"ReferenceType":3,"ReferenceID":"Helpers-Demo"}],"LibraryMappings":[{"Company":"EPIC06","Allowed":true}]}}