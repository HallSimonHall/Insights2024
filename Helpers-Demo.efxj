{"Mode":"Backup","Version":"4.2.400","SystemCode":"ERP","LibraryId":"Helpers-Demo","Library":{"OriginalID":"Helpers-Demo","Description":"List of additional helper functions","GlobalID":"961f1715-046f-4e33-9862-0685a92db689","EpicorVersion":"4.2.400","Revision":14,"Published":false,"Private":false,"Disabled":false,"Mode":0,"AllowCustomCodeWidgets":true,"AllowCustomCodeFunctions":true,"DirectDBAccess":0,"OwnedByCompany":"EPIC06","Owner":"epicor","Functions":[{"FunctionID":"ExecuteBAQ","Description":"Executes a BAQ and parses a parameter string ParameterName::Value string delmitted with ~ Returns output as system string and dsResult as Syste.Data.DataSet","Kind":2,"RequireTransaction":false,"SingleRowMode":false,"Private":false,"Disabled":false,"Invalid":false,"Thumbnail":null,"Body":"{\"Code\":\"  //Gets all Column data from an executed BAQ given a Parameter list with parameter pairs ~ separated with parameter:parameter value format\\r\\n  \\r\\n  //Helper Function (Func<T>) to get THIS Function ID  https://www.epiusers.help/t/get-the-name-of-a-function/112406/4 Thanks Kev :)\\r\\n    Func<string> GetFunctionID = () =>\\r\\n  {\\r\\n      string functionName = this.GetType().Name; \\r\\n      string suffix = \\\"Impl\\\";\\r\\n      \\r\\n      return functionName.EndsWith(suffix) ? functionName.Remove(functionName.LastIndexOf(suffix)) : functionName;\\r\\n  };\\r\\n\\r\\ntry\\r\\n{\\r\\n    this.CallService<Ice.Contracts.DynamicQuerySvcContract>(BAQSvc => {\\r\\n        var ds = BAQSvc.GetByID(BAQName);\\r\\n        var dqds = BAQSvc.GetQueryExecutionParametersByID(BAQName);\\r\\n        \\r\\n       \\r\\n        //Split the parameter list into pairs and update the parameter values   \\r\\n        if (this.ParamList != null && dqds.ExecutionParameter.Count > 0)\\r\\n        {\\r\\n            var paramPairs = this.ParamList.Split('~');\\r\\n            \\r\\n            \\r\\n            foreach (var pair in paramPairs)\\r\\n            {\\r\\n                var parts = pair.Split(':');\\r\\n                if (parts.Length == 2)\\r\\n                {\\r\\n                    var paramName = parts[0];\\r\\n                    var paramValue = parts[1];\\r\\n\\r\\n                    var param = dqds.ExecutionParameter.Where(x => x.ParameterID == paramName).FirstOrDefault();\\r\\n                    \\r\\n                    if (param != null)\\r\\n                    {\\r\\n                        param.ParameterValue = paramValue.ToString();\\r\\n                        param.RowMod = \\\"U\\\";\\r\\n                        \\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            output = $\\\"BAQ ID-{BAQName} :  has (dqds.ExecutionParameter.Count) parameters.\\\";\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            output = $\\\"BAQ ID-{BAQName} : has no parameters.\\\";\\r\\n        }\\r\\n\\r\\n        //execute the BAQ\\r\\n        this.dsResult = BAQSvc.ExecuteByID(BAQName, dqds);\\r\\n\\r\\n        //execute the BAQ\\r\\n        this.dsResult = BAQSvc.ExecuteByID(BAQName, dqds);\\r\\n\\r\\n    });\\r\\n}\\r\\ncatch (Exception ex)\\r\\n{\\r\\n    // Handle the exception here\\r\\n    //Yikes Something smells like \\\"An evening in Fitzroy\\\"\\r\\n    string errMsg = $\\\"{GetFunctionID()} ExecuteBAQ {BAQName}: An error occurred: {ex.Message}\\\";\\r\\n    Ice.Diagnostics.Log.WriteEntry(errMsg);\\r\\n    throw new BLException(errMsg);\\r\\n    \\r\\n}\",\"Usings\":\"\"}","Notes":"[epicor: 06/08/2024]\nV1 \n","FunctionSignature":[{"Response":false,"ParameterID":1,"ArgumentName":"ParamList","Order":1,"DataType":"System.String","Optional":false},{"Response":false,"ParameterID":2,"ArgumentName":"BAQName","Order":2,"DataType":"System.String","Optional":false},{"Response":true,"ParameterID":1,"ArgumentName":"dsResult","Order":1,"DataType":"System.Data.DataSet","Optional":false},{"Response":true,"ParameterID":2,"ArgumentName":"output","Order":2,"DataType":"System.String","Optional":false}]}],"LibraryReferences":[{"ReferenceType":0,"ReferenceID":"Newtonsoft.Json.dll"},{"ReferenceType":0,"ReferenceID":"RestSharp.dll"},{"ReferenceType":0,"ReferenceID":"RestSharp.Serializers.NewtonsoftJson.dll"},{"ReferenceType":2,"ReferenceID":"ICE:BO:DynamicQuery"}],"LibraryMappings":[{"Company":"EPIC06","Allowed":true}]}}